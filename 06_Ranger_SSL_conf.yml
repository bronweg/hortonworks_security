- name: Create csr file and send it to ansible server
  hosts: WHOLE-CLUSTER-ANSIBLE-GROUP
  become: yes
  vars:
    ambari_admin_user: "admin"
    ambari_admin_password: "admin"
  tasks:
  - set_fact:
      general_configpy_args: "--host={{ inventory_hostname|lower }} --port=8443 --protocol=https --action=set --cluster=HDF_SYS --user={{ ambari_admin_user }} --password={{ ambari_admin_password }} --unsafe "

  - name: Configure SSL for ranger-env
    shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=admin-properties --key={{ item.key }} --value={{ item.value }}"
    with_items:
      - { key: "policymgr_external_url", value: "https://{{ inventory_hostname|lower }}:6182" } 
    when: "'AMBARI_SERVER' in group_names"

  - name: Configure SSL for ranger-env
    shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-admin-site --key={{ item.key }} --value={{ item.value }}"
    with_items:
      - { key: "ranger.service.http.enabled", value: "false" } 
    when: "'AMBARI_SERVER' in group_names"

  - name: Configure SSL for ranger-admin-site
    shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-admin-site --key={{ item.key }} --value={{ item.value }} --version-note={{ item.key }}"
    with_items:
      - { key: "ranger.truststore.alias", value: "rootca" } 
      - { key: "ranger.truststore.file", value: "/etc/security/serverKeys/jks/truststore.jks" } 
      - { key: "ranger.truststore.password", value: "Big_59_Data" } 
      - { key: "ranger.https.attrib.keystore.file", value: "/etc/security/serverKeys/jks/keystore.jks" } 
      - { key: "ranger.service.https.attrib.keystore.keyalias", value: "{{ inventory_hostname|lower }}" } 
      - { key: "ranger.service.https.attrib.keystore.pass", value: "Big_59_Data" } 
      - { key: "ranger.service.https.attrib.clientAuth", value: "false" } 
      - { key: "ranger.service.https.attrib.ssl.enabled", value: "true" } 
      - { key: "ranger.service.https.port", value: "6182" } 
      - { key: "ranger.service.https.attrib.keystore.file", value: "/etc/security/serverKeys/jks/keystore.jks" } 
      - { key: "ranger.service.https.attrib.client.auth", value: "false" } 
      - { key: "ranger.authentication.method", value: "ACTIVE_DIRECTORY" } 
      - { key: "ranger.ldap.ad.domain", value: "mac.org.il" } 
      - { key: "ranger.ldap.ad.base.dn", value: 'OU=HDF,OU=Servers,OU=Non-Prod\ Environments,OU=Maccabi-Root,DC=mac,DC=org,DC=il' } 
      - { key: "ranger.ldap.ad.referral", value: "follow" } 
      - { key: "ranger.ldap.ad.user.searchfilter", value: '\{\{ranger_ug_ldap_user_searchfilter\}\}' } 
    when: "'AMBARI_SERVER' in group_names"

  - name: Configure SSL for ranger-ugsync-site
    shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-ugsync-site --key={{ item.key }} --value={{ item.value }}"
    with_items:
      - { key: "ranger.usersync.truststore.file", value: "/etc/security/serverKeys/jks/truststore.jks" } 
      - { key: "ranger.usersync.truststore.password", value: "Big_59_Data" } 
      - { key: "ranger.usersync.source.impl.class", value: "org.apache.ranger.ldapusersync.process.LdapUserGroupBuilder" } 
      - { key: "ranger.usersync.ldap.url", value: "ldaps://macad04.mac.org.il:636" } 
      - { key: "ranger.usersync.ldap.binddn", value: 'CN=app_hortonsvc,OU=HDF,OU=Servers,OU=Non-Prod\ Environments,OU=Maccabi-Root,DC=mac,DC=org,DC=il' } 
      - { key: "ranger.usersync.ldap.deltasync", value: "false" } 
      - { key: "ranger.usersync.ldap.user.nameattribute", value: "cn" } 
      - { key: "ranger.usersync.ldap.user.searchbase", value: 'OU=HDF,OU=Servers,OU=Non-Prod\ Environments,OU=Maccabi-Root,DC=mac,DC=org,DC=il' } 
      - { key: "ranger.usersync.ldap.user.groupnameattribute", value: "sAMAccountName" } 
      - { key: "ranger.usersync.group.memberattributename", value: "member" } 
      - { key: "ranger.usersync.group.nameattribute", value: "sAMAccountName" } 
      - { key: "ranger.usersync.group.objectclass", value: "group" } 
      - { key: "ranger.usersync.group.searchbase", value: 'OU=HDF,OU=Servers,OU=Non-Prod\ Environments,OU=Maccabi-Root,DC=mac,DC=org,DC=il' } 
    when: "'AMBARI_SERVER' in group_names"

  - name: Configure Ranger Admin credentials
    shell: "/var/lib/ambari-server/resources/scripts/configs.py {{ general_configpy_args }} --config-type=ranger-env --key={{ item.key }} --value={{ item.value }}"
    with_items:
      - { key: "ranger_admin_username", value: "admin" }
      - { key: "ranger_admin_password", value: "Adminadminadmin123" }
      - { key: "admin_password", value: "Adminadminadmin123" }
    when: "'AMBARI_SERVER' in group_names"

  - name: Fix permissions on file /etc/ranger/admin/.rangeradmin.jceks.crc
    file:
      path: /etc/ranger/admin/.rangeradmin.jceks.crc
      owner: ranger
      group: ranger
    when: "'AMBARI_SERVER' in group_names"

  - name: Restart all services with stale configuration
    uri:
      url: https://{{ inventory_hostname }}:8443/api/v1/clusters/{{ hostvars[inventory_hostname].cluster_name }}/requests
      method: POST
      validate_certs: no
      force_basic_auth: yes
      user: "{{ ambari_admin_user }}"
      password: "{{ ambari_admin_password }}"
      headers: '{"X-Requested-By":"ambari", "Content-Type":"text/plain"}'
      body: {"RequestInfo":{"context":"Restart all services with stale configuration via REST","operational_level": "host_component","command": "RESTART"},"Requests/resource_filters": [{"hosts_predicate": "HostRoles/stale_configs=true&HostRoles/cluster_name={{ hostvars[inventory_hostname].cluster_name }}"}]}
      body_format: json
      timeout: 120
      return_content: yes
      status_code: 200,201,202
    register: returned_from_cluster
    until: returned_from_cluster.status == 202
    retries: 300
    delay: 1
    when: "'AMBARI_SERVER' in group_names"
  
  - name: Waiting for all services will restart
    uri:
      url: "{{ returned_from_cluster.json.href }}"
      validate_certs: no
      force_basic_auth: yes
      user: "{{ ambari_admin_user }}"
      password: "{{ ambari_admin_password }}"
      headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
      status_code: 200,201,202
      return_content: yes
    register: cluster_check_task
    until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0))
    retries: 600
    delay: 1
    when: "'AMBARI_SERVER' in group_names"

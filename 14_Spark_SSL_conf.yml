- name: "Create copy the existing keystores and change the alias of the key"
  block:
    - copy:
        remote_src: yes
        src: "{{ lookup('vars', 'main_' + item) }}"
        dest: "{{ lookup('vars', 'spark_' + item) }}"
        owner: spark
        group: spark
      with_items:
        - keystore
        - truststore
    - shell: "keytool -changealias -keystore {{ spark_keystore }} -alias {{ inventory_hostname|lower }} -destalias spark-key -storepass {{ security_password }}"

- name: "Configure SSL for Spark"
  include_tasks: edit_xml_configuration_file.yml
  vars:
    path: "{{ yarn_site_xml }}"
    xpath: "{{ item.xpath }}"
    value: "{{ item.value }}"
  with_items:
    - { xpath: 'spark.authenticate', value: "true" }

  include_tasks: edit_xml_configuration_file.yml
    vars:
    path: "{{ spark_defaults_conf }}"
    xpath: "{{ item.xpath }}"
    value: "{{ item.value }}"
  with_items:
    # Enable Spark authentication
    - { xpath: 'spark.authenticate', value: "true" }
    - { xpath: 'spark.authenticate.enableSaslEncryption', value: "true" }
    # Enable Spark SSL
    - { xpath: 'spark.ssl.enabled', value: "true" }
    - { xpath: 'spark.ssl.keyPassword', value: "{{ security_password }}" }
    - { xpath: 'spark.ssl.keyStore', value: "{{ spark_keystore }}" }
    - { xpath: 'spark.ssl.keyStorePassword', value: "{{ security_password }}" }
    - { xpath: 'spark.ssl.protocol', value: "TLS" }
    - { xpath: 'spark.ssl.trustStore', value: "{{ spark_truststore }}" }
    - { xpath: 'spark.ssl.trustStorePassword', value: "{{ security_password }}" }
    # Enable HTTPS for the Spark UI
    - { xpath: 'spark.ui.https.enabled', value: "true" }
    # (Optional) If you want to enable optional on-disk block encryption, which applies to both shuffle and RDD blocks on disk
#    - { xpath: 'spark.io.encryption.enabled', value: "true" }
#    - { xpath: 'spark.io.encryption.keySizeBits', value: "128" }
#    - { xpath: 'spark.io.encryption.keygen.algorithm', value: "HmacSHA1" }

- name: Restart Spark2 service and waiting for tasks finish
  include: included_start_or_stop_ambari_services.yml service="SPARK2" action={{ item }}
  with_items:
    - Stop
    - Start

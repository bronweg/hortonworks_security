- name: "Create copy the existing keystores and change the alias of the key"
  block:
    - copy:
        remote_src: yes
        src: "{{ main_{{ item }} }}"
        dest: "{{ spark_{{ item }} }}"
        owner: spark
        group: spark
      with_items:
        - keystore
        - truststore
    - shell: "keytool -changealias -keystore {{ spark_keystore }} -alias {{ inventory_hostname|lower }} -destalias spark-key -storepass {{ security_password }}"

- name: "Configure SSL for Spark"
  xml:
    path: "{{ yarn-site-xml }}"
    xpath: /configuration/property[name="{{ item.xpath }}"]/value
    value: "{{ item.value }}"
  with_items:
    - { xpath: 'spark.authenticate', value: "true" }

  xml:
    path: "{{ spark-defaults-conf }}"
    xpath: /configuration/property[name="{{ item.xpath }}"]/value
    value: "{{ item.value }}"
  with_items:
    # Enable Spark authentication
    - { xpath: 'spark.authenticate', value: "true" }
    - { xpath: 'spark.authenticate.enableSaslEncryption', value: "true" }
    # Enable Spark SSL
    - { xpath: 'spark.ssl.enabled', value: "true" }
    - { xpath: 'spark.ssl.keyPassword', value: "{{ security_password }}" }
    - { xpath: 'spark.ssl.keyStore', value: "{{ spark_keystore }}" }
    - { xpath: 'spark.ssl.keyStorePassword', value: "{{ security_password }}" }
    - { xpath: 'spark.ssl.protocol', value: "TLS" }
    - { xpath: 'spark.ssl.trustStore', value: "{{ spark_truststore }}" }
    - { xpath: 'spark.ssl.trustStorePassword', value: "{{ security_password }}" }
    # Enable HTTPS for the Spark UI
    - { xpath: 'spark.ui.https.enabled', value: "true" }
    # (Optional) If you want to enable optional on-disk block encryption, which applies to both shuffle and RDD blocks on disk
#    - { xpath: 'spark.io.encryption.enabled', value: "true" }
#    - { xpath: 'spark.io.encryption.keySizeBits', value: "128" }
#    - { xpath: 'spark.io.encryption.keygen.algorithm', value: "HmacSHA1" }

- name: Restart and wait for all relevant services
  block:
    - name: Restart all services with stale configuration
      uri:
        url: https://{{ inventory_hostname }}:{{ ambari_https_port }}/api/v1/clusters/{{ hostvars[inventory_hostname].cluster_name }}/requests
        method: POST
        validate_certs: no
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari", "Content-Type":"text/plain"}'
        body: {"RequestInfo":{"context":"Restart all services with stale configuration via REST","operational_level": "host_component","command": "RESTART"},"Requests/resource_filters": [{"hosts_predicate": "HostRoles/stale_configs=true&HostRoles/cluster_name={{ hostvars[inventory_hostname].cluster_name }}"}]}
        body_format: json
        timeout: 120
        return_content: yes
        status_code: 200,201,202
      register: returned_from_cluster
      until: returned_from_cluster.status == 202
      retries: 300
      delay: 1
    
    - name: "Waiting for all services will restart"
      uri:
        url: "{{ returned_from_cluster.json.href }}"
        validate_certs: no
        force_basic_auth: yes
        user: "{{ ambari_admin_user }}"
        password: "{{ ambari_admin_password }}"
        headers: '{"X-Requested-By":"ambari", "Content-Type":"application/json"}'
        status_code: 200,201,202
        return_content: yes
      register: cluster_check_task
      until: (((cluster_check_task.content|from_json).Requests.request_status == 'COMPLETED' and (cluster_check_task.content|from_json).Requests.completed_task_count|int > 0))
      retries: 600
      delay: 1
  when: "'AMBARI_SERVER' in group_names"
